[[plugins]]
repo = "tomasr/molokai"

[[plugins]]
repo = 'Shougo/denite.nvim'
if = 'has("nvim")'

[[plugins]]
repo  = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'github/copilot.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> c         defx#do_action('copy')
  nnoremap <silent><buffer><expr> m         defx#do_action('move')
  nnoremap <silent><buffer><expr> p         defx#do_action('paste')
  nnoremap <silent><buffer><expr> <Enter>   defx#do_action('open')
  nnoremap <silent><buffer><expr> o defx#is_directory() ?
  \  defx#do_action('open_or_close_tree') :
  \  defx#do_action('open')
  nnoremap <silent><buffer><expr> O         defx#do_action('open_tree_recursive')
  nnoremap <silent><buffer><expr> K         defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N         defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d         defx#do_action('remove')
  nnoremap <silent><buffer><expr> r         defx#do_action('rename')
  nnoremap <silent><buffer><expr> x         defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy        defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .         defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> q         defx#do_action('quit')
  nnoremap <silent><buffer> D :<C-u>call <SID>defx_reload()<CR>
endfunction

autocmd BufEnter,VimEnter,BufNew,BufWinEnter,BufRead,BufCreate
      \ * if isdirectory(expand('<amatch>'))
      \   | call s:browse_check(expand('<amatch>')) | endif

function! s:browse_check(path) abort
  if bufnr('%') != expand('<abuf>')
    return
  endif

  " Disable netrw.
  augroup FileExplorer
    autocmd!
  augroup END

  execute 'Defx -resume -buffer_name=explorer' a:path
endfunction
'''

hook_post_source = '''
call defx#custom#option('_', {
    \ 'ignored_files': '^\.git$, ^\.DS_Store$',
    \ 'buffer_name': 'exlorer',
    \ 'toggle': 1,
    \ 'resume': 1,
    \ })
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'skanehira/gh.vim'

[[plugins]]
repo = 'iberianpig/tig-explorer.vim'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'kana/vim-altr'

[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
nnoremap <silent> <Leader>p  :<C-u>CtrlP<CR>
let g:ctrlp_max_height    = 20
let g:ctrlp_user_command  = 'ag %s -l'
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|pkg\|git\|vender\|Vender\|vendor\|tmp\|\v\.(o|d|out|log|bin|gcno|gcda|pyc|retry|log|dist|out|.next|vendor)$'
let g:ctrlp_use_caching   = 1
if executable('ag')
set grepprg=ag\ --nogroup\ --nocolor
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
  \ }
  endif
  '''

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
let g:test#strategy = 'dispatch'
let g:test#php#phpunit#executable = './vendor/bin/phpunit'
nnoremap <silent> <Leader>t :TestFile<CR>
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'tyru/operator-camelize.vim'

[[plugins]]
repo = 'bkad/CamelCaseMotion'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'w0rp/ale'

[[plugins]]
repo = 'thinca/vim-qfreplace'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'AndrewRadev/switch.vim'

[[plugins]]
repo = 'kamykn/spelunker.vim'

[[plugins]]
repo = 'mattn/vim-sonictemplate'
hook_add = '''
let g:sonictemplate_vim_template_dir = expand('~/dotfiles/nvim/sonictemplate')
'''

[[plugins]]
repo = 'neovim/node-host'
on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx']
build = './install.sh'

[[plugins]]
repo = 'styled-components/vim-styled-components'
on_ft = ['javascript', 'typescript', 'javascript.jsx', 'typescript.tsx']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'php', 'javascript', 'javascript.jsx', 'jsx', 'typescript', 'typescript.tsx', 'tsx', 'vue', 'javascript.vue', 'typescript.vue']

[[plugins]]
repo = 'AndrewRadev/tagalong.vim'
on_ft = ['html', 'php', 'javascript', 'javascript.jsx', 'jsx', 'typescript', 'typescript.tsx', 'tsx', 'vue', 'javascript.vue', 'typescript.vue']

[[plugins]]
repo = 'gko/vim-coloresque'
on_ft = ['html', 'css', 'scss', 'php', 'javascript', 'javascript.jsx', 'jsx', 'typescript', 'typescript.tsx', 'tsx', 'vue', 'javascript.vue', 'typescript.vue']

[[plugins]]
repo  = 'pantharshit00/vim-prisma'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'
on_ft = ['scss']

[[plugins]]
repo = 'gabrielelana/vim-markdown'
on_ft = ['markdown','mkd']

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''

[[plugins]]
repo = 'jparise/vim-graphql'
on_ft = 'graphql'

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:polyglot_disabled = ['markdown']
'''

[[plugins]]
repo = 'mattn/vim-goimports'
on_ft = ['go']

[[plugins]]
repo = 'zalgo3/vim-chatgpt'
rev = 'nvim'
# https://github.com/mattn/vim-chatgpt/pull/4

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'skanehira/denops-twihi.vim'

[[plugins]]
repo = 'skanehira/denops-gh.vim'
